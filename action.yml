name: 'AWS Cognito Auth'
description: 'Provision AWS Cognito User Pool for authentication using Terraform with customizable branding assets'
author: 'alonch'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  action:
    description: 'Desired outcome: apply, plan or destroy'
    required: false
    default: 'apply'
  name:
    description: 'Cognito User Pool name - will be used as the Name tag'
    required: true
  callback_urls:
    description: 'Comma-separated list of callback URLs for OAuth'
    required: false
    default: 'https://example.com/callback'
  logout_urls:
    description: 'Comma-separated list of logout URLs for OAuth'
    required: false
    default: 'https://example.com'
  enable_managed_login_branding:
    description: 'Enable managed login branding with customizable assets (use background_asset_path, logo_asset_path, favicon_asset_path)'
    required: false
    default: 'false'
  login_position:
    description: 'Login form horizontal position: START, CENTER, or END (only works when enable_managed_login_branding is true)'
    required: false
    default: 'CENTER'
  enable_google_identity_provider:
    description: 'Enable Google identity provider for Cognito User Pool'
    required: false
    default: 'false'
  google_client_id:
    description: 'Google OAuth 2.0 client ID (required when enable_google_identity_provider is true)'
    required: false
    default: ''
  google_client_secret:
    description: 'Google OAuth 2.0 client secret (required when enable_google_identity_provider is true)'
    required: false
    default: ''
  background_asset_path:
    description: 'Path to background image asset (supported: png, jpg, jpeg, svg)'
    required: false
    default: ''
  logo_asset_path:
    description: 'Path to logo image asset (supported: png, jpg, jpeg, svg)'
    required: false
    default: ''
  favicon_asset_path:
    description: 'Path to favicon asset (supported: ico, png)'
    required: false
    default: ''

outputs:
  user_pool_id:
    description: 'ID of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_id }}
  user_pool_arn:
    description: 'ARN of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_arn }}
  client_id:
    description: 'ID of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_id }}
  client_secret:
    description: 'Secret of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_secret }}
  user_pool_domain:
    description: 'Domain of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_domain }}
  login_url:
    description: 'Complete login URL for the Cognito Hosted UI'
    value: ${{ steps.outputs.outputs.login_url }}
  cognito_domain:
    description: 'Cognito provided domain URL'
    value: ${{ steps.outputs.outputs.cognito_domain }}
  managed_login_branding_enabled:
    description: 'Whether managed login branding is enabled'
    value: ${{ steps.outputs.outputs.managed_login_branding_enabled }}
  managed_login_version:
    description: 'Managed login version used by the domain'
    value: ${{ steps.outputs.outputs.managed_login_version }}
  managed_login_branding_id:
    description: 'ID of the managed login branding resource'
    value: ${{ steps.outputs.outputs.managed_login_branding_id }}
  hosted_ui_url:
    description: 'Complete hosted UI URL for sign-in'
    value: ${{ steps.outputs.outputs.hosted_ui_url }}
  google_identity_provider_enabled:
    description: 'Whether Google identity provider is enabled'
    value: ${{ steps.outputs.outputs.google_identity_provider_enabled }}
  google_identity_provider_name:
    description: 'Name of the Google identity provider (if enabled)'
    value: ${{ steps.outputs.outputs.google_identity_provider_name }}
  supported_identity_providers:
    description: 'List of supported identity providers'
    value: ${{ steps.outputs.outputs.supported_identity_providers }}

runs:
  using: "composite"
  steps:
    - name: Terraform init for apply/plan
      if: inputs.action != 'destroy'
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: ${{ inputs.background_asset_path }}
        TF_VAR_logo_asset_path: ${{ inputs.logo_asset_path }}
        TF_VAR_favicon_asset_path: ${{ inputs.favicon_asset_path }}

    - name: Terraform plan
      if: inputs.action == 'plan'
      run: terraform plan
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: ${{ inputs.background_asset_path }}
        TF_VAR_logo_asset_path: ${{ inputs.logo_asset_path }}
        TF_VAR_favicon_asset_path: ${{ inputs.favicon_asset_path }}

    - name: Terraform init and destroy
      if: inputs.action == 'destroy'
      run: |
        echo "Initializing Terraform for destroy operation..."
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"

        echo "Destroying resources..."
        terraform destroy -auto-approve
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: ${{ inputs.background_asset_path }}
        TF_VAR_logo_asset_path: ${{ inputs.logo_asset_path }}
        TF_VAR_favicon_asset_path: ${{ inputs.favicon_asset_path }}

    - name: Terraform apply
      id: terraform
      if: inputs.action == 'apply'
      run: |
        # Force recreation of managed login branding if enabled and resource exists
        if [ "${{ inputs.enable_managed_login_branding }}" == "true" ]; then
          if terraform state list | grep -q "awscc_cognito_managed_login_branding.this"; then
            echo "Tainting managed login branding resource to force recreation..."
            terraform taint 'awscc_cognito_managed_login_branding.this[0]' || true
          else
            echo "Managed login branding resource not found in state, will be created fresh"
          fi
        fi
        
        terraform apply -auto-approve
        USER_POOL_ID=$(terraform output -raw user_pool_id | tr -d '\r\n')
        USER_POOL_ARN=$(terraform output -raw user_pool_arn | tr -d '\r\n')
        CLIENT_ID=$(terraform output -raw user_pool_client_id | tr -d '\r\n')
        CLIENT_SECRET=$(terraform output -raw user_pool_client_secret | tr -d '\r\n')
        USER_POOL_DOMAIN=$(terraform output -raw user_pool_domain | tr -d '\r\n')
        LOGIN_URL=$(terraform output -raw login_url | tr -d '\r\n')
        COGNITO_DOMAIN=$(terraform output -raw cognito_domain | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ENABLED=$(terraform output -raw managed_login_branding_enabled | tr -d '\r\n')
        MANAGED_LOGIN_VERSION=$(terraform output -raw managed_login_version | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ID=$(terraform output -raw managed_login_branding_id | tr -d '\r\n')
        HOSTED_UI_URL=$(terraform output -raw hosted_ui_url | tr -d '\r\n')
        GOOGLE_IDENTITY_PROVIDER_ENABLED=$(terraform output -raw google_identity_provider_enabled | tr -d '\r\n')
        GOOGLE_IDENTITY_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name | tr -d '\r\n')
        SUPPORTED_IDENTITY_PROVIDERS=$(terraform output -raw supported_identity_providers | tr -d '\r\n')

        # Set outputs temporarily
        echo "user_pool_id=$USER_POOL_ID" >> "$GITHUB_OUTPUT"
        echo "user_pool_arn=$USER_POOL_ARN" >> "$GITHUB_OUTPUT"
        echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
        echo "client_secret=$CLIENT_SECRET" >> "$GITHUB_OUTPUT"
        echo "user_pool_domain=$USER_POOL_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "login_url=$LOGIN_URL" >> "$GITHUB_OUTPUT"
        echo "cognito_domain=$COGNITO_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_enabled=$MANAGED_LOGIN_BRANDING_ENABLED" >> "$GITHUB_OUTPUT"
        echo "managed_login_version=$MANAGED_LOGIN_VERSION" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_id=$MANAGED_LOGIN_BRANDING_ID" >> "$GITHUB_OUTPUT"
        echo "hosted_ui_url=$HOSTED_UI_URL" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_enabled=$GOOGLE_IDENTITY_PROVIDER_ENABLED" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_name=$GOOGLE_IDENTITY_PROVIDER_NAME" >> "$GITHUB_OUTPUT"
        echo "supported_identity_providers=$SUPPORTED_IDENTITY_PROVIDERS" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: ${{ inputs.background_asset_path }}
        TF_VAR_logo_asset_path: ${{ inputs.logo_asset_path }}
        TF_VAR_favicon_asset_path: ${{ inputs.favicon_asset_path }}

    - name: Set final outputs
      id: outputs
      shell: bash
      run: |
        if [ "${{ inputs.action }}" == "destroy" ]; then
          # For destroy action, we don't have meaningful outputs
          echo "user_pool_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_secret=destroyed" >> "$GITHUB_OUTPUT"
          echo "user_pool_domain=destroyed" >> "$GITHUB_OUTPUT"
          echo "login_url=destroyed" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=destroyed" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_enabled=destroyed" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_name=destroyed" >> "$GITHUB_OUTPUT"
          echo "supported_identity_providers=destroyed" >> "$GITHUB_OUTPUT"
        elif [ "${{ inputs.action }}" == "apply" ]; then
          # Use outputs from apply step
          echo "user_pool_id=${{ steps.terraform.outputs.user_pool_id }}" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=${{ steps.terraform.outputs.user_pool_arn }}" >> "$GITHUB_OUTPUT"
          echo "client_id=${{ steps.terraform.outputs.client_id }}" >> "$GITHUB_OUTPUT"
          echo "client_secret=${{ steps.terraform.outputs.client_secret }}" >> "$GITHUB_OUTPUT"
          echo "user_pool_domain=${{ steps.terraform.outputs.user_pool_domain }}" >> "$GITHUB_OUTPUT"
          echo "login_url=${{ steps.terraform.outputs.login_url }}" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=${{ steps.terraform.outputs.cognito_domain }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=${{ steps.terraform.outputs.managed_login_branding_enabled }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=${{ steps.terraform.outputs.managed_login_version }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=${{ steps.terraform.outputs.managed_login_branding_id }}" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=${{ steps.terraform.outputs.hosted_ui_url }}" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_enabled=${{ steps.terraform.outputs.google_identity_provider_enabled }}" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_name=${{ steps.terraform.outputs.google_identity_provider_name }}" >> "$GITHUB_OUTPUT"
          echo "supported_identity_providers=${{ steps.terraform.outputs.supported_identity_providers }}" >> "$GITHUB_OUTPUT"
        else
          # For plan action, set placeholder values
          echo "user_pool_id=planned" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=planned" >> "$GITHUB_OUTPUT"
          echo "client_id=planned" >> "$GITHUB_OUTPUT"
          echo "client_secret=planned" >> "$GITHUB_OUTPUT"
          echo "user_pool_domain=planned" >> "$GITHUB_OUTPUT"
          echo "login_url=planned" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=planned" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=planned" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_enabled=planned" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_name=planned" >> "$GITHUB_OUTPUT"
          echo "supported_identity_providers=planned" >> "$GITHUB_OUTPUT"
        fi