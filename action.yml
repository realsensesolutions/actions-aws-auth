name: 'AWS Cognito Auth'
description: 'Provision AWS Cognito User Pool for authentication using Terraform'
author: 'alonch'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  action:
    description: 'Desired outcome: apply, plan or destroy'
    required: false
    default: 'apply'
  name:
    description: 'Cognito User Pool name - will be used as the Name tag'
    required: true
  callback_urls:
    description: 'Comma-separated list of callback URLs for OAuth'
    required: false
    default: 'https://example.com/callback'
  logout_urls:
    description: 'Comma-separated list of logout URLs for OAuth'
    required: false
    default: 'https://example.com'
  enable_managed_login_branding:
    description: 'Enable managed login branding for Cognito UI customization'
    required: false
    default: 'false'
  branding_settings_file:
    description: 'Path to JSON file containing branding settings for managed login'
    required: false
    default: ''
  branding_assets:
    description: 'JSON array of branding assets for managed login (max 15 assets)'
    required: false
    default: '[]'
  branding_assets_file:
    description: 'Path to JSON file containing branding assets for managed login'
    required: false
    default: ''

outputs:
  user_pool_id:
    description: 'ID of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_id }}
  user_pool_arn:
    description: 'ARN of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_arn }}
  client_id:
    description: 'ID of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_id }}
  client_secret:
    description: 'Secret of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_secret }}
  cognito_domain:
    description: 'Cognito provided domain URL'
    value: ${{ steps.outputs.outputs.cognito_domain }}
  managed_login_branding_enabled:
    description: 'Whether managed login branding is enabled'
    value: ${{ steps.outputs.outputs.managed_login_branding_enabled }}
  managed_login_version:
    description: 'Managed login version used by the domain'
    value: ${{ steps.outputs.outputs.managed_login_version }}
  managed_login_branding_id:
    description: 'ID of the managed login branding resource'
    value: ${{ steps.outputs.outputs.managed_login_branding_id }}
  hosted_ui_url:
    description: 'Complete hosted UI URL for sign-in'
    value: ${{ steps.outputs.outputs.hosted_ui_url }}

runs:
  using: "composite"
  steps:
    - name: Terraform init for apply/plan
      if: inputs.action != 'destroy'
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_branding_settings_file: "${{ github.workspace }}/${{ inputs.branding_settings_file }}"
        TF_VAR_branding_assets: ${{ inputs.branding_assets }}
        TF_VAR_branding_assets_file: "${{ github.workspace }}/${{ inputs.branding_assets_file }}"

    - name: Terraform plan
      if: inputs.action == 'plan'
      run: terraform plan
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_branding_settings_file: ${{ inputs.branding_settings_file }}
        TF_VAR_branding_assets: ${{ inputs.branding_assets }}
        TF_VAR_branding_assets_file: ${{ inputs.branding_assets_file }}

    - name: Terraform init and destroy
      if: inputs.action == 'destroy'
      run: |
        echo "Initializing Terraform for destroy operation..."
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"

        echo "Destroying resources..."
        terraform destroy -auto-approve
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_branding_settings_file: ${{ inputs.branding_settings_file }}
        TF_VAR_branding_assets: ${{ inputs.branding_assets }}
        TF_VAR_branding_assets_file: ${{ inputs.branding_assets_file }}

    - name: Terraform apply
      id: terraform
      if: inputs.action == 'apply'
      run: |
        terraform apply -auto-approve
        USER_POOL_ID=$(terraform output -raw user_pool_id | tr -d '\r\n')
        USER_POOL_ARN=$(terraform output -raw user_pool_arn | tr -d '\r\n')
        CLIENT_ID=$(terraform output -raw client_id | tr -d '\r\n')
        CLIENT_SECRET=$(terraform output -raw client_secret | tr -d '\r\n')
        COGNITO_DOMAIN=$(terraform output -raw cognito_domain | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ENABLED=$(terraform output -raw managed_login_branding_enabled | tr -d '\r\n')
        MANAGED_LOGIN_VERSION=$(terraform output -raw managed_login_version | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ID=$(terraform output -raw managed_login_branding_id | tr -d '\r\n')
        HOSTED_UI_URL=$(terraform output -raw hosted_ui_url | tr -d '\r\n')

        # Set outputs temporarily
        echo "user_pool_id=$USER_POOL_ID" >> "$GITHUB_OUTPUT"
        echo "user_pool_arn=$USER_POOL_ARN" >> "$GITHUB_OUTPUT"
        echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
        echo "client_secret=$CLIENT_SECRET" >> "$GITHUB_OUTPUT"
        echo "cognito_domain=$COGNITO_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_enabled=$MANAGED_LOGIN_BRANDING_ENABLED" >> "$GITHUB_OUTPUT"
        echo "managed_login_version=$MANAGED_LOGIN_VERSION" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_id=$MANAGED_LOGIN_BRANDING_ID" >> "$GITHUB_OUTPUT"
        echo "hosted_ui_url=$HOSTED_UI_URL" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_branding_settings_file: ${{ inputs.branding_settings_file }}
        TF_VAR_branding_assets: ${{ inputs.branding_assets }}
        TF_VAR_branding_assets_file: ${{ inputs.branding_assets_file }}

    - name: Set final outputs
      id: outputs
      shell: bash
      run: |
        if [ "${{ inputs.action }}" == "destroy" ]; then
          # For destroy action, we don't have meaningful outputs
          echo "user_pool_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_secret=destroyed" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=destroyed" >> "$GITHUB_OUTPUT"
        else
          # Always use Terraform outputs for apply/plan actions
          echo "user_pool_id=${{ steps.terraform.outputs.user_pool_id }}" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=${{ steps.terraform.outputs.user_pool_arn }}" >> "$GITHUB_OUTPUT"
          echo "client_id=${{ steps.terraform.outputs.client_id }}" >> "$GITHUB_OUTPUT"
          echo "client_secret=${{ steps.terraform.outputs.client_secret }}" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=${{ steps.terraform.outputs.cognito_domain }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=${{ steps.terraform.outputs.managed_login_branding_enabled }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=${{ steps.terraform.outputs.managed_login_version }}" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=${{ steps.terraform.outputs.managed_login_branding_id }}" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=${{ steps.terraform.outputs.hosted_ui_url }}" >> "$GITHUB_OUTPUT"
        fi