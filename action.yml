name: 'AWS Cognito Auth'
description: 'Provision AWS Cognito User Pool for authentication using Terraform with customizable branding assets'
author: 'alonch'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  action:
    description: 'Desired outcome: apply, plan or destroy'
    required: false
    default: 'apply'
  name:
    description: 'Cognito User Pool name - will be used as the Name tag'
    required: true
  callback_urls:
    description: 'Comma-separated list of callback URLs for OAuth'
    required: false
    default: 'https://example.com/callback'
  logout_urls:
    description: 'Comma-separated list of logout URLs for OAuth'
    required: false
    default: 'https://example.com'
  enable_managed_login_branding:
    description: 'Enable managed login branding with customizable assets (use background_asset_path, logo_asset_path, favicon_asset_path)'
    required: false
    default: 'false'
  login_position:
    description: 'Login form horizontal position: START, CENTER, or END (only works when enable_managed_login_branding is true)'
    required: false
    default: 'CENTER'
  enable_google_identity_provider:
    description: 'Enable Google identity provider for Cognito User Pool'
    required: false
    default: 'false'
  google_provider_only:
    description: 'When Google identity provider is enabled, use only Google provider (true) or both Google and Cognito (false)'
    required: false
    default: 'false'
  google_client_id:
    description: 'Google OAuth 2.0 client ID (required when enable_google_identity_provider is true)'
    required: false
    default: ''
  google_client_secret:
    description: 'Google OAuth 2.0 client secret (required when enable_google_identity_provider is true)'
    required: false
    default: ''
  background_asset_path:
    description: 'Path to background image asset relative to workspace root (supported: png, jpg, jpeg, svg)'
    required: false
    default: ''
  logo_asset_path:
    description: 'Path to logo image asset relative to workspace root (supported: png, jpg, jpeg, svg)'
    required: false
    default: ''
  favicon_asset_path:
    description: 'Path to favicon asset relative to workspace root (supported: ico, png)'
    required: false
    default: ''
  admin_user:
    description: 'Enable creation of admin user in Cognito User Pool'
    required: false
    default: 'false'
  admin_email:
    description: 'Email address for the admin user (required when admin_user is true)'
    required: false
    default: ''

outputs:
  user_pool_id:
    description: 'ID of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_id }}
  user_pool_arn:
    description: 'ARN of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_arn }}
  client_id:
    description: 'ID of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_id }}
  client_secret:
    description: 'Secret of the Cognito User Pool Client'
    value: ${{ steps.outputs.outputs.client_secret }}
  user_pool_domain:
    description: 'Domain of the Cognito User Pool'
    value: ${{ steps.outputs.outputs.user_pool_domain }}
  login_url:
    description: 'Complete login URL for the Cognito Hosted UI'
    value: ${{ steps.outputs.outputs.login_url }}
  cognito_domain:
    description: 'Cognito provided domain URL'
    value: ${{ steps.outputs.outputs.cognito_domain }}
  managed_login_branding_enabled:
    description: 'Whether managed login branding is enabled'
    value: ${{ steps.outputs.outputs.managed_login_branding_enabled }}
  managed_login_version:
    description: 'Managed login version used by the domain'
    value: ${{ steps.outputs.outputs.managed_login_version }}
  managed_login_branding_id:
    description: 'ID of the managed login branding resource'
    value: ${{ steps.outputs.outputs.managed_login_branding_id }}
  hosted_ui_url:
    description: 'Complete hosted UI URL for sign-in'
    value: ${{ steps.outputs.outputs.hosted_ui_url }}
  google_identity_provider_enabled:
    description: 'Whether Google identity provider is enabled'
    value: ${{ steps.outputs.outputs.google_identity_provider_enabled }}
  google_provider_only:
    description: 'Whether only Google provider is used (excludes Cognito native auth)'
    value: ${{ steps.outputs.outputs.google_provider_only }}
  google_identity_provider_name:
    description: 'Name of the Google identity provider (if enabled)'
    value: ${{ steps.outputs.outputs.google_identity_provider_name }}
  supported_identity_providers:
    description: 'List of supported identity providers'
    value: ${{ steps.outputs.outputs.supported_identity_providers }}
  admin_user_enabled:
    description: 'Whether admin user creation is enabled'
    value: ${{ steps.outputs.outputs.admin_user_enabled }}
  admin_user_created:
    description: 'Whether admin user was actually created (requires both admin_user=true and valid admin_email)'
    value: ${{ steps.outputs.outputs.admin_user_created }}
  admin_username:
    description: 'Username of the admin user (if created)'
    value: ${{ steps.outputs.outputs.admin_username }}

runs:
  using: "composite"
  steps:
    - name: Terraform init for apply/plan
      if: inputs.action != 'destroy'
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="use_lockfile=true" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_provider_only: ${{ inputs.google_provider_only }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: "${{ github.workspace }}/${{ inputs.background_asset_path }}"
        TF_VAR_logo_asset_path: "${{ github.workspace }}/${{ inputs.logo_asset_path }}"
        TF_VAR_favicon_asset_path: "${{ github.workspace }}/${{ inputs.favicon_asset_path }}"
        TF_VAR_admin_user: ${{ inputs.admin_user }}
        TF_VAR_admin_email: ${{ inputs.admin_email }}

    - name: Terraform plan
      if: inputs.action == 'plan'
      run: terraform plan
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_provider_only: ${{ inputs.google_provider_only }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: "${{ github.workspace }}/${{ inputs.background_asset_path }}"
        TF_VAR_logo_asset_path: "${{ github.workspace }}/${{ inputs.logo_asset_path }}"
        TF_VAR_favicon_asset_path: "${{ github.workspace }}/${{ inputs.favicon_asset_path }}"
        TF_VAR_admin_user: ${{ inputs.admin_user }}
        TF_VAR_admin_email: ${{ inputs.admin_email }}

    - name: Terraform init and destroy
      if: inputs.action == 'destroy'
      run: |
        echo "Initializing Terraform for destroy operation..."
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="use_lockfile=true" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"

        echo "Destroying resources..."
        terraform destroy -auto-approve
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-auth/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_provider_only: ${{ inputs.google_provider_only }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: "${{ github.workspace }}/${{ inputs.background_asset_path }}"
        TF_VAR_logo_asset_path: "${{ github.workspace }}/${{ inputs.logo_asset_path }}"
        TF_VAR_favicon_asset_path: "${{ github.workspace }}/${{ inputs.favicon_asset_path }}"
        TF_VAR_admin_user: ${{ inputs.admin_user }}
        TF_VAR_admin_email: ${{ inputs.admin_email }}

    - name: Debug step - Show current configuration
      if: inputs.action == 'apply'
      run: |
        echo "Debug: Current configuration:"
        echo "  enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}"
        echo "  enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}"
        echo "  background_asset_path: '${{ inputs.background_asset_path }}'"
        echo "  logo_asset_path: '${{ inputs.logo_asset_path }}'"
        echo "  favicon_asset_path: '${{ inputs.favicon_asset_path }}'"
      shell: bash

    - name: Check if branding asset files changed
      id: check_assets
      if: inputs.action == 'apply' && inputs.enable_managed_login_branding == 'true'
      uses: actions/github-script@v7
      env:
        BACKGROUND_ASSET_PATH: ${{ inputs.background_asset_path }}
        LOGO_ASSET_PATH: ${{ inputs.logo_asset_path }}
        FAVICON_ASSET_PATH: ${{ inputs.favicon_asset_path }}
      with:
        script: |
          const assetPaths = [
            process.env.BACKGROUND_ASSET_PATH,
            process.env.LOGO_ASSET_PATH,
            process.env.FAVICON_ASSET_PATH
          ].filter(path => path && path.trim() !== '');
          
          if (assetPaths.length === 0) {
            console.log('No asset paths provided, skipping change detection');
            core.setOutput('assets_changed', 'false');
            return;
          }
          
          console.log('Checking for changes in asset files:', assetPaths);
          
          try {
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.payload.after
            });
            
            const changedFiles = comparison.files?.map(file => file.filename) || [];
            console.log('Changed files in this push:', changedFiles);
            
            const assetsChanged = assetPaths.some(assetPath => 
              changedFiles.includes(assetPath)
            );
            
            console.log('Assets changed:', assetsChanged);
            core.setOutput('assets_changed', assetsChanged.toString());
          } catch (error) {
            console.log('Error checking file changes, defaulting to true:', error.message);
            core.setOutput('assets_changed', 'true');
          }

    - name: Check if Terraform configuration files changed
      id: check_terraform_config
      if: inputs.action == 'apply'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Checking for changes in Terraform configuration files');
          
          try {
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.payload.after
            });
            
            const changedFiles = comparison.files?.map(file => file.filename) || [];
            console.log('Changed files in this push:', changedFiles);
            
            const terraformFiles = ['main.tf', 'variables.tf', 'outputs.tf', 'required_providers.tf'];
            const terraformChanged = terraformFiles.some(tfFile => 
              changedFiles.includes(tfFile)
            );
            
            console.log('Terraform configuration files changed:', terraformChanged);
            core.setOutput('terraform_changed', terraformChanged.toString());
          } catch (error) {
            console.log('Error checking terraform file changes, defaulting to true:', error.message);
            core.setOutput('terraform_changed', 'true');
          }

    - name: Check if action inputs or workflow configuration changed
      id: check_input_config
      if: inputs.action == 'apply'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Checking for changes in action inputs or workflow configuration');
          
          try {
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.payload.after
            });
            
            const changedFiles = comparison.files?.map(file => file.filename) || [];
            console.log('Changed files in this push:', changedFiles);
            
            // Check for action.yml changes (input definitions, defaults, etc.)
            // Check for workflow files that might use this action with different parameters
            const configFiles = [
              'action.yml', 
              '.github/workflows/',
              'config/branding-settings.json.tftpl'
            ];
            
            const configChanged = changedFiles.some(file => {
              return configFiles.some(pattern => {
                if (pattern.endsWith('/')) {
                  return file.startsWith(pattern);
                } else {
                  return file === pattern;
                }
              });
            });
            
            console.log('Action inputs or workflow configuration changed:', configChanged);
            core.setOutput('input_config_changed', configChanged.toString());
          } catch (error) {
            console.log('Error checking input/workflow file changes, defaulting to true:', error.message);
            core.setOutput('input_config_changed', 'true');
          }


    - name: Terraform apply
      id: terraform
      if: inputs.action == 'apply' && (inputs.enable_managed_login_branding == 'true' || steps.check_assets.outputs.assets_changed == 'true' || steps.check_terraform_config.outputs.terraform_changed == 'true' || steps.check_input_config.outputs.input_config_changed == 'true')
      run: |
        # Force recreation of managed login branding only if assets have changed
        if [ "${{ inputs.enable_managed_login_branding }}" == "true" ]; then
          if [ "${{ steps.check_assets.outputs.assets_changed }}" == "true" ]; then
            if terraform state list | grep -q "awscc_cognito_managed_login_branding.this"; then
              echo "Asset files have changed. Tainting managed login branding resource to force recreation..."
              terraform taint 'awscc_cognito_managed_login_branding.this[0]' || true
            else
              echo "Managed login branding resource not found in state, will be created fresh"
            fi
          else
            echo "No asset files have changed. Skipping taint of managed login branding resource."
          fi
        fi
        
        terraform apply -auto-approve
        USER_POOL_ID=$(terraform output -raw user_pool_id | tr -d '\r\n')
        USER_POOL_ARN=$(terraform output -raw user_pool_arn | tr -d '\r\n')
        CLIENT_ID=$(terraform output -raw user_pool_client_id | tr -d '\r\n')
        CLIENT_SECRET=$(terraform output -raw user_pool_client_secret | tr -d '\r\n')
        USER_POOL_DOMAIN=$(terraform output -raw user_pool_domain | tr -d '\r\n')
        LOGIN_URL=$(terraform output -raw login_url | tr -d '\r\n')
        COGNITO_DOMAIN=$(terraform output -raw cognito_domain | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ENABLED=$(terraform output -raw managed_login_branding_enabled | tr -d '\r\n')
        MANAGED_LOGIN_VERSION=$(terraform output -raw managed_login_version | tr -d '\r\n')
        if [ "${{ inputs.enable_managed_login_branding }}" == "true" ]; then
          # Check if managed_login_branding_id output exists before trying to retrieve it
          if terraform output managed_login_branding_id >/dev/null 2>&1; then
            MANAGED_LOGIN_BRANDING_ID=$(terraform output -raw managed_login_branding_id | tr -d '\r\n')
          else
            echo "Warning: managed_login_branding_id output not found in state, setting to empty"
            MANAGED_LOGIN_BRANDING_ID=""
          fi
        else
          MANAGED_LOGIN_BRANDING_ID=""
        fi
        HOSTED_UI_URL=$(terraform output -raw hosted_ui_url | tr -d '\r\n')
        GOOGLE_IDENTITY_PROVIDER_ENABLED=$(terraform output -raw google_identity_provider_enabled | tr -d '\r\n')
        # Check if google_provider_only output exists before trying to retrieve it
        if terraform output google_provider_only >/dev/null 2>&1; then
          GOOGLE_PROVIDER_ONLY=$(terraform output -raw google_provider_only | tr -d '\r\n')
        else
          echo "Warning: google_provider_only output not found in state, setting to false"
          GOOGLE_PROVIDER_ONLY="false"
        fi
        if [ "${{ inputs.enable_google_identity_provider }}" == "true" ]; then
          GOOGLE_IDENTITY_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name | tr -d '\r\n')
        else
          GOOGLE_IDENTITY_PROVIDER_NAME=""
        fi
        SUPPORTED_IDENTITY_PROVIDERS=$(terraform output -raw supported_identity_providers | tr -d '\r\n')

        # Set outputs temporarily
        echo "user_pool_id=$USER_POOL_ID" >> "$GITHUB_OUTPUT"
        echo "user_pool_arn=$USER_POOL_ARN" >> "$GITHUB_OUTPUT"
        echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
        echo "client_secret=$CLIENT_SECRET" >> "$GITHUB_OUTPUT"
        echo "user_pool_domain=$USER_POOL_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "login_url=$LOGIN_URL" >> "$GITHUB_OUTPUT"
        echo "cognito_domain=$COGNITO_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_enabled=$MANAGED_LOGIN_BRANDING_ENABLED" >> "$GITHUB_OUTPUT"
        echo "managed_login_version=$MANAGED_LOGIN_VERSION" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_id=$MANAGED_LOGIN_BRANDING_ID" >> "$GITHUB_OUTPUT"
        echo "hosted_ui_url=$HOSTED_UI_URL" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_enabled=$GOOGLE_IDENTITY_PROVIDER_ENABLED" >> "$GITHUB_OUTPUT"
        echo "google_provider_only=$GOOGLE_PROVIDER_ONLY" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_name=$GOOGLE_IDENTITY_PROVIDER_NAME" >> "$GITHUB_OUTPUT"
        echo "supported_identity_providers=$SUPPORTED_IDENTITY_PROVIDERS" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_provider_only: ${{ inputs.google_provider_only }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: "${{ github.workspace }}/${{ inputs.background_asset_path }}"
        TF_VAR_logo_asset_path: "${{ github.workspace }}/${{ inputs.logo_asset_path }}"
        TF_VAR_favicon_asset_path: "${{ github.workspace }}/${{ inputs.favicon_asset_path }}"
        TF_VAR_admin_user: ${{ inputs.admin_user }}
        TF_VAR_admin_email: ${{ inputs.admin_email }}


    - name: Get existing outputs when apply is skipped
      id: terraform_skipped
      if: inputs.action == 'apply' && inputs.enable_managed_login_branding == 'true' && steps.check_assets.outputs.assets_changed != 'true' && steps.check_terraform_config.outputs.terraform_changed != 'true' && steps.check_input_config.outputs.input_config_changed != 'true'
      run: |
        echo "Terraform apply was skipped because no branding assets, Terraform configuration, or input configuration changed. Getting existing outputs..."
        USER_POOL_ID=$(terraform output -raw user_pool_id | tr -d '\r\n')
        USER_POOL_ARN=$(terraform output -raw user_pool_arn | tr -d '\r\n')
        CLIENT_ID=$(terraform output -raw user_pool_client_id | tr -d '\r\n')
        CLIENT_SECRET=$(terraform output -raw user_pool_client_secret | tr -d '\r\n')
        USER_POOL_DOMAIN=$(terraform output -raw user_pool_domain | tr -d '\r\n')
        LOGIN_URL=$(terraform output -raw login_url | tr -d '\r\n')
        COGNITO_DOMAIN=$(terraform output -raw cognito_domain | tr -d '\r\n')
        MANAGED_LOGIN_BRANDING_ENABLED=$(terraform output -raw managed_login_branding_enabled | tr -d '\r\n')
        MANAGED_LOGIN_VERSION=$(terraform output -raw managed_login_version | tr -d '\r\n')
        if [ "${{ inputs.enable_managed_login_branding }}" == "true" ]; then
          # Check if managed_login_branding_id output exists before trying to retrieve it
          if terraform output managed_login_branding_id >/dev/null 2>&1; then
            MANAGED_LOGIN_BRANDING_ID=$(terraform output -raw managed_login_branding_id | tr -d '\r\n')
          else
            echo "Warning: managed_login_branding_id output not found in state, setting to empty"
            MANAGED_LOGIN_BRANDING_ID=""
          fi
        else
          MANAGED_LOGIN_BRANDING_ID=""
        fi
        HOSTED_UI_URL=$(terraform output -raw hosted_ui_url | tr -d '\r\n')
        GOOGLE_IDENTITY_PROVIDER_ENABLED=$(terraform output -raw google_identity_provider_enabled | tr -d '\r\n')
        # Check if google_provider_only output exists before trying to retrieve it
        if terraform output google_provider_only >/dev/null 2>&1; then
          GOOGLE_PROVIDER_ONLY=$(terraform output -raw google_provider_only | tr -d '\r\n')
        else
          echo "Warning: google_provider_only output not found in state, setting to false"
          GOOGLE_PROVIDER_ONLY="false"
        fi
        if [ "${{ inputs.enable_google_identity_provider }}" == "true" ]; then
          GOOGLE_IDENTITY_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name | tr -d '\r\n')
        else
          GOOGLE_IDENTITY_PROVIDER_NAME=""
        fi
        SUPPORTED_IDENTITY_PROVIDERS=$(terraform output -raw supported_identity_providers | tr -d '\r\n')

        # Set outputs
        echo "user_pool_id=$USER_POOL_ID" >> "$GITHUB_OUTPUT"
        echo "user_pool_arn=$USER_POOL_ARN" >> "$GITHUB_OUTPUT"
        echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
        echo "client_secret=$CLIENT_SECRET" >> "$GITHUB_OUTPUT"
        echo "user_pool_domain=$USER_POOL_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "login_url=$LOGIN_URL" >> "$GITHUB_OUTPUT"
        echo "cognito_domain=$COGNITO_DOMAIN" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_enabled=$MANAGED_LOGIN_BRANDING_ENABLED" >> "$GITHUB_OUTPUT"
        echo "managed_login_version=$MANAGED_LOGIN_VERSION" >> "$GITHUB_OUTPUT"
        echo "managed_login_branding_id=$MANAGED_LOGIN_BRANDING_ID" >> "$GITHUB_OUTPUT"
        echo "hosted_ui_url=$HOSTED_UI_URL" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_enabled=$GOOGLE_IDENTITY_PROVIDER_ENABLED" >> "$GITHUB_OUTPUT"
        echo "google_provider_only=$GOOGLE_PROVIDER_ONLY" >> "$GITHUB_OUTPUT"
        echo "google_identity_provider_name=$GOOGLE_IDENTITY_PROVIDER_NAME" >> "$GITHUB_OUTPUT"
        echo "supported_identity_providers=$SUPPORTED_IDENTITY_PROVIDERS" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_callback_urls: ${{ inputs.callback_urls }}
        TF_VAR_logout_urls: ${{ inputs.logout_urls }}
        TF_VAR_enable_managed_login_branding: ${{ inputs.enable_managed_login_branding }}
        TF_VAR_login_position: ${{ inputs.login_position }}
        TF_VAR_enable_google_identity_provider: ${{ inputs.enable_google_identity_provider }}
        TF_VAR_google_provider_only: ${{ inputs.google_provider_only }}
        TF_VAR_google_client_id: ${{ inputs.google_client_id }}
        TF_VAR_google_client_secret: ${{ inputs.google_client_secret }}
        TF_VAR_background_asset_path: "${{ github.workspace }}/${{ inputs.background_asset_path }}"
        TF_VAR_logo_asset_path: "${{ github.workspace }}/${{ inputs.logo_asset_path }}"
        TF_VAR_favicon_asset_path: "${{ github.workspace }}/${{ inputs.favicon_asset_path }}"
        TF_VAR_admin_user: ${{ inputs.admin_user }}
        TF_VAR_admin_email: ${{ inputs.admin_email }}

    - name: Set final outputs
      id: outputs
      shell: bash
      run: |
        if [ "${{ inputs.action }}" == "destroy" ]; then
          # For destroy action, we don't have meaningful outputs
          echo "user_pool_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "client_secret=destroyed" >> "$GITHUB_OUTPUT"
          echo "user_pool_domain=destroyed" >> "$GITHUB_OUTPUT"
          echo "login_url=destroyed" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=destroyed" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=destroyed" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_enabled=destroyed" >> "$GITHUB_OUTPUT"
          echo "google_provider_only=destroyed" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_name=destroyed" >> "$GITHUB_OUTPUT"
          echo "supported_identity_providers=destroyed" >> "$GITHUB_OUTPUT"
        elif [ "${{ inputs.action }}" == "apply" ]; then
          # Use outputs from apply step or skipped step
          if [ "${{ steps.terraform.conclusion }}" == "success" ]; then
            # Use outputs from successful apply
            echo "user_pool_id=${{ steps.terraform.outputs.user_pool_id }}" >> "$GITHUB_OUTPUT"
            echo "user_pool_arn=${{ steps.terraform.outputs.user_pool_arn }}" >> "$GITHUB_OUTPUT"
            echo "client_id=${{ steps.terraform.outputs.client_id }}" >> "$GITHUB_OUTPUT"
            echo "client_secret=${{ steps.terraform.outputs.client_secret }}" >> "$GITHUB_OUTPUT"
            echo "user_pool_domain=${{ steps.terraform.outputs.user_pool_domain }}" >> "$GITHUB_OUTPUT"
            echo "login_url=${{ steps.terraform.outputs.login_url }}" >> "$GITHUB_OUTPUT"
            echo "cognito_domain=${{ steps.terraform.outputs.cognito_domain }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_branding_enabled=${{ steps.terraform.outputs.managed_login_branding_enabled }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_version=${{ steps.terraform.outputs.managed_login_version }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_branding_id=${{ steps.terraform.outputs.managed_login_branding_id }}" >> "$GITHUB_OUTPUT"
            echo "hosted_ui_url=${{ steps.terraform.outputs.hosted_ui_url }}" >> "$GITHUB_OUTPUT"
            echo "google_identity_provider_enabled=${{ steps.terraform.outputs.google_identity_provider_enabled }}" >> "$GITHUB_OUTPUT"
            echo "google_provider_only=${{ steps.terraform.outputs.google_provider_only }}" >> "$GITHUB_OUTPUT"
            echo "google_identity_provider_name=${{ steps.terraform.outputs.google_identity_provider_name }}" >> "$GITHUB_OUTPUT"
            echo "supported_identity_providers=${{ steps.terraform.outputs.supported_identity_providers }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ steps.terraform_skipped.conclusion }}" == "success" ]; then
            # Use outputs from skipped step
            echo "user_pool_id=${{ steps.terraform_skipped.outputs.user_pool_id }}" >> "$GITHUB_OUTPUT"
            echo "user_pool_arn=${{ steps.terraform_skipped.outputs.user_pool_arn }}" >> "$GITHUB_OUTPUT"
            echo "client_id=${{ steps.terraform_skipped.outputs.client_id }}" >> "$GITHUB_OUTPUT"
            echo "client_secret=${{ steps.terraform_skipped.outputs.client_secret }}" >> "$GITHUB_OUTPUT"
            echo "user_pool_domain=${{ steps.terraform_skipped.outputs.user_pool_domain }}" >> "$GITHUB_OUTPUT"
            echo "login_url=${{ steps.terraform_skipped.outputs.login_url }}" >> "$GITHUB_OUTPUT"
            echo "cognito_domain=${{ steps.terraform_skipped.outputs.cognito_domain }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_branding_enabled=${{ steps.terraform_skipped.outputs.managed_login_branding_enabled }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_version=${{ steps.terraform_skipped.outputs.managed_login_version }}" >> "$GITHUB_OUTPUT"
            echo "managed_login_branding_id=${{ steps.terraform_skipped.outputs.managed_login_branding_id }}" >> "$GITHUB_OUTPUT"
            echo "hosted_ui_url=${{ steps.terraform_skipped.outputs.hosted_ui_url }}" >> "$GITHUB_OUTPUT"
            echo "google_identity_provider_enabled=${{ steps.terraform_skipped.outputs.google_identity_provider_enabled }}" >> "$GITHUB_OUTPUT"
            echo "google_provider_only=${{ steps.terraform_skipped.outputs.google_provider_only }}" >> "$GITHUB_OUTPUT"
            echo "google_identity_provider_name=${{ steps.terraform_skipped.outputs.google_identity_provider_name }}" >> "$GITHUB_OUTPUT"
            echo "supported_identity_providers=${{ steps.terraform_skipped.outputs.supported_identity_providers }}" >> "$GITHUB_OUTPUT"
          fi
        else
          # For plan action, set placeholder values
          echo "user_pool_id=planned" >> "$GITHUB_OUTPUT"
          echo "user_pool_arn=planned" >> "$GITHUB_OUTPUT"
          echo "client_id=planned" >> "$GITHUB_OUTPUT"
          echo "client_secret=planned" >> "$GITHUB_OUTPUT"
          echo "user_pool_domain=planned" >> "$GITHUB_OUTPUT"
          echo "login_url=planned" >> "$GITHUB_OUTPUT"
          echo "cognito_domain=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_enabled=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_version=planned" >> "$GITHUB_OUTPUT"
          echo "managed_login_branding_id=planned" >> "$GITHUB_OUTPUT"
          echo "hosted_ui_url=planned" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_enabled=planned" >> "$GITHUB_OUTPUT"
          echo "google_provider_only=planned" >> "$GITHUB_OUTPUT"
          echo "google_identity_provider_name=planned" >> "$GITHUB_OUTPUT"
          echo "supported_identity_providers=planned" >> "$GITHUB_OUTPUT"
        fi